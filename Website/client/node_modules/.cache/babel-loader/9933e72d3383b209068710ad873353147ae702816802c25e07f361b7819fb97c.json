{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Documents\\\\HeyHiJob\\\\Website\\\\client\\\\src\\\\page\\\\MCQPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../CSS/MCQPage.css'; // Add the necessary styles here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MCQPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [error, setError] = useState(null);\n  const [numQuestions, setNumQuestions] = useState('');\n  const [subject, setSubject] = useState('');\n  const [selectedOptions, setSelectedOptions] = useState({});\n  const [feedbacks, setFeedbacks] = useState({});\n  const [colors, setColors] = useState({}); // To store color per question\n\n  const handleResponse = data => {\n    const formattedQuestions = Object.values(data).map(q => ({\n      question: q.mcq,\n      options: Object.entries(q.options).map(([key, value]) => ({\n        key,\n        value\n      })),\n      correct: q.correct\n    }));\n    setQuestions(formattedQuestions);\n  };\n  const handleFetchQuestion = () => {\n    fetch('http://127.0.0.1:5000/question', {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        numQuestions,\n        subject\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"network response not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      handleResponse(data);\n    }).catch(error => {\n      setError(error.message);\n      console.log(\"Error fetching question: \", error);\n    });\n  };\n  const handleOptionClick = (questionIndex, optionKey, correctAnswer) => {\n    setSelectedOptions(prev => ({\n      ...prev,\n      [questionIndex]: optionKey\n    }));\n    if (optionKey === correctAnswer) {\n      // If correct, set color to green and reset after 5 seconds\n      setColors(prev => ({\n        ...prev,\n        [questionIndex]: 'green'\n      }));\n      setTimeout(() => {\n        setColors(prev => ({\n          ...prev,\n          [questionIndex]: 'black'\n        }));\n      }, 5000);\n    } else {\n      // If wrong, set color to red and leave it red\n      setColors(prev => ({\n        ...prev,\n        [questionIndex]: 'red'\n      }));\n    }\n    setFeedbacks(prev => ({\n      ...prev,\n      [questionIndex]: optionKey === correctAnswer ? \"Correct!\" : \"It is not correct!\"\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"mcq-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"numQuestions\",\n        children: \"Number of Questions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"numQuestions\",\n        value: numQuestions,\n        onChange: e => setNumQuestions(e.target.value),\n        placeholder: \"Enter number of questions\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"subject\",\n        children: \"Subject:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"subject\",\n        value: subject,\n        onChange: e => setSubject(e.target.value),\n        placeholder: \"Enter subject of questions\",\n        className: \"input-field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleFetchQuestion,\n      className: \"fetch-btn\",\n      children: \"Fetch Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this), questions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions-container\",\n      children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [index + 1, \") \", q.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: q.options.map(option => /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"option-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: `question-${index}`,\n              value: option.key,\n              onClick: () => handleOptionClick(index, option.key, q.correct),\n              className: \"option-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: selectedOptions[index] === option.key ? colors[index] : 'black'\n              },\n              children: option.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 21\n            }, this)]\n          }, option.key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this), selectedOptions[index] && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"feedback\",\n          children: [\"Feedback: \", feedbacks[index]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(MCQPage, \"P7cA/El1+tL7lwBJyJYy3/uwmvE=\");\n_c = MCQPage;\nexport default MCQPage;\nvar _c;\n$RefreshReg$(_c, \"MCQPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MCQPage","_s","questions","setQuestions","error","setError","numQuestions","setNumQuestions","subject","setSubject","selectedOptions","setSelectedOptions","feedbacks","setFeedbacks","colors","setColors","handleResponse","data","formattedQuestions","Object","values","map","q","question","mcq","options","entries","key","value","correct","handleFetchQuestion","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","catch","message","console","log","handleOptionClick","questionIndex","optionKey","correctAnswer","prev","setTimeout","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","e","target","placeholder","onClick","length","index","option","name","style","color","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/OneDrive/Documents/HeyHiJob/Website/client/src/page/MCQPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../CSS/MCQPage.css'; // Add the necessary styles here\r\n\r\nconst MCQPage = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [numQuestions, setNumQuestions] = useState('');\r\n  const [subject, setSubject] = useState('');\r\n  const [selectedOptions, setSelectedOptions] = useState({});\r\n  const [feedbacks, setFeedbacks] = useState({});\r\n  const [colors, setColors] = useState({}); // To store color per question\r\n\r\n  const handleResponse = (data) => {\r\n    const formattedQuestions = Object.values(data).map(q => ({\r\n      question: q.mcq,\r\n      options: Object.entries(q.options).map(([key, value]) => ({\r\n        key,\r\n        value\r\n      })),\r\n      correct: q.correct\r\n    }));\r\n    setQuestions(formattedQuestions);\r\n  };\r\n\r\n  const handleFetchQuestion = () => {\r\n    fetch('http://127.0.0.1:5000/question', {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        numQuestions,\r\n        subject,\r\n      }),\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(\"network response not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        handleResponse(data);\r\n      })\r\n      .catch(error => {\r\n        setError(error.message);\r\n        console.log(\"Error fetching question: \", error);\r\n      });\r\n  };\r\n\r\n  const handleOptionClick = (questionIndex, optionKey, correctAnswer) => {\r\n    setSelectedOptions(prev => ({\r\n      ...prev,\r\n      [questionIndex]: optionKey\r\n    }));\r\n\r\n    if (optionKey === correctAnswer) {\r\n      // If correct, set color to green and reset after 5 seconds\r\n      setColors(prev => ({\r\n        ...prev,\r\n        [questionIndex]: 'green'\r\n      }));\r\n      setTimeout(() => {\r\n        setColors(prev => ({\r\n          ...prev,\r\n          [questionIndex]: 'black'\r\n        }));\r\n      }, 5000);\r\n    } else {\r\n      // If wrong, set color to red and leave it red\r\n      setColors(prev => ({\r\n        ...prev,\r\n        [questionIndex]: 'red'\r\n      }));\r\n    }\r\n\r\n    setFeedbacks(prev => ({\r\n      ...prev,\r\n      [questionIndex]: optionKey === correctAnswer ? \"Correct!\" : \"It is not correct!\"\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <form className=\"mcq-form\">\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"numQuestions\">Number of Questions:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"numQuestions\"\r\n          value={numQuestions}\r\n          onChange={(e) => setNumQuestions(e.target.value)}\r\n          placeholder='Enter number of questions'\r\n          className=\"input-field\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"subject\">Subject:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"subject\"\r\n          value={subject}\r\n          onChange={(e) => setSubject(e.target.value)}\r\n          placeholder='Enter subject of questions'\r\n          className=\"input-field\"\r\n        />\r\n      </div>\r\n      <button type=\"button\" onClick={handleFetchQuestion} className=\"fetch-btn\">Fetch Questions</button>\r\n\r\n      {error && <p className=\"error\">Error: {error}</p>}\r\n\r\n      {questions.length === 0 ? (\r\n        <p>Loading questions...</p>\r\n      ) : (\r\n        <div className=\"questions-container\">\r\n          {questions.map((q, index) => (\r\n            <div key={index} className=\"question-block\">\r\n              <h3>{index + 1}) {q.question}</h3>\r\n              <div className=\"options-container\">\r\n                {q.options.map(option => (\r\n                  <label key={option.key} className=\"option-label\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      name={`question-${index}`}\r\n                      value={option.key}\r\n                      onClick={() => handleOptionClick(index, option.key, q.correct)}\r\n                      className=\"option-input\"\r\n                    />\r\n                    <span style={{ color: selectedOptions[index] === option.key ? colors[index] : 'black' }}>\r\n                      {option.value}\r\n                    </span>\r\n                  </label>\r\n                ))}\r\n              </div>\r\n              {selectedOptions[index] && (\r\n                <p className=\"feedback\">Feedback: {feedbacks[index]}</p>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MCQPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}